@model DashboardChartsViewModel
@using System.Text.Json

@{
    ViewData["Title"] = "Dashboard Charts";
} 

<div class="row">
    @await Html.PartialAsync("_ChartCard", new ChartViewModel {
        ChartId = Model.LineChart.ChartId,
        ChartTitle = Model.LineChart.ChartTitle,
        IconClass = "fas fa-route"
    })

    @await Html.PartialAsync("_ChartCard", new ChartViewModel {
        ChartId = Model.StackedBarChart.ChartId,
        ChartTitle = Model.StackedBarChart.ChartTitle,
        IconClass = "fas fa-cogs"
    })

    @await Html.PartialAsync("_ChartCard", new ChartViewModel {
        ChartId = Model.PieChart.ChartId,
        ChartTitle = Model.PieChart.ChartTitle,
        IconClass = "fas fa-car"
    })

    @await Html.PartialAsync("_ChartCard", new ChartViewModel {
        ChartId = Model.BarChart.ChartId,
        ChartTitle = Model.BarChart.ChartTitle,
        IconClass = "fas fa-chart-bar"
    })
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            function renderChart(chartId, chartType, chartTitle, labels, datasets, stacked = false) {
                const ctx = document.getElementById(chartId)?.getContext('2d');
                if (!ctx) {
                    console.error("Canvas not found: " + chartId);
                    return;
                }

                const centerTextPlugin = {
                    id: 'centerText',
                    beforeDraw(chart) {
                        if (chart.config.type !== 'doughnut') return;

                        const ctx = chart.ctx;
                        const total = chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                        const width = chart.width;
                        const height = chart.height;

                        ctx.save();
                        ctx.font = 'bold ' + (height / 10) + 'px sans-serif';
                        ctx.textAlign = 'center';
                        ctx.textBaseline = 'middle';
                        ctx.fillStyle = '#333';
                        ctx.fillText(total, width / 2, height / 2);
                        ctx.restore();
                    }
                };

                const isDoughnut = chartType === "doughnut";

                const options = {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: isDoughnut,
                            position: 'right',
                            labels: {
                                usePointStyle: true,
                                pointStyle: 'circle'
                            }
                        },
                        title: {
                            display: false
                        }
                    },
                    scales: (chartType === 'bar' || chartType === 'line') ? {
                        x: {
                            stacked: stacked,
                            grid: { display: false },
                            ticks: {
                                minRotation: 55,
                                maxRotation: 55,
                                stepSize: 20,
                                maxTicksLimit: 20
                            }
                        },
                        y: {
                            stacked: stacked,
                            beginAtZero: true,
                            grid: { display: false }
                        }
                    } : undefined
                };

                if (isDoughnut) {
                    options.cutout = '50%';
                }

                new Chart(ctx, {
                    type: chartType,
                    data: {
                        labels: labels,
                        datasets: datasets
                    },
                    options: options
                    // plugins: isDoughnut ? [centerTextPlugin] : []
                });
            }

            // Dynamic chart rendering
            renderChart(
                '@Model.PieChart.ChartId',
                '@Model.PieChart.ChartType',
                '@Model.PieChart.ChartTitle',
        @Html.Raw(JsonSerializer.Serialize(Model.PieChart.Labels)),
        @Html.Raw(JsonSerializer.Serialize(Model.PieChart.Datasets))
                            );

            renderChart(
                '@Model.BarChart.ChartId',
                '@Model.BarChart.ChartType',
                '@Model.BarChart.ChartTitle',
        @Html.Raw(JsonSerializer.Serialize(Model.BarChart.Labels)),
        @Html.Raw(JsonSerializer.Serialize(Model.BarChart.Datasets)),
                true
            );

            renderChart(
                '@Model.LineChart.ChartId',
                '@Model.LineChart.ChartType',
                '@Model.LineChart.ChartTitle',
        @Html.Raw(JsonSerializer.Serialize(Model.LineChart.Labels)),
        @Html.Raw(JsonSerializer.Serialize(Model.LineChart.Datasets))
                            );

            renderChart(
                '@Model.StackedBarChart.ChartId',
                '@Model.StackedBarChart.ChartType',
                '@Model.StackedBarChart.ChartTitle',
        @Html.Raw(JsonSerializer.Serialize(Model.StackedBarChart.Labels)),
        @Html.Raw(JsonSerializer.Serialize(Model.StackedBarChart.Datasets)),
                true
            );
        });
    </script>
}
